namespace uma_crypto {
    [Throws=CryptoError]
    sequence<u8> sign_ecdsa(sequence<u8> msg, sequence<u8> private_key_bytes);

    [Throws=CryptoError]
    boolean verify_ecdsa(sequence<u8> msg, sequence<u8> signature_bytes, sequence<u8> public_key_bytes);

    [Throws=CryptoError]
    sequence<u8> encrypt_ecies(sequence<u8> msg, sequence<u8> public_key_bytes);

    [Throws=CryptoError]
    sequence<u8> decrypt_ecies(sequence<u8> cipher_text, sequence<u8> private_key_bytes);

    [Throws=CryptoError]
    KeyPair generate_keypair();

    [Throws=Bech32Error]
    string encode_bech32(string hrp, sequence<u8> message_data);

    [Throws=Bech32Error]
    Bech32Data decode_bech32(string bech32_str);
};

interface KeyPair {
    sequence<u8> get_public_key();
    sequence<u8> get_private_key();
};

interface Bech32Data {
  sequence<u8> get_data();
  string get_hrp(); 
};

[Error]
enum CryptoError {
  "Secp256k1Error",
};

[Error]
enum Bech32Error {
  "Bech32EncodeError",
  "Bech32DecodeError"
};
